{
  "name": "Idea_Workflow_v1",
  "nodes": [
    {
      "parameters": {
        "operation": "search",
        "location": "allReddit",
        "keyword": "Topic , Keyword",
        "additionalFields": {
          "sort": "hot"
        }
      },
      "type": "n8n-nodes-base.reddit",
      "typeVersion": 1,
      "position": [
        -704,
        448
      ],
      "id": "e5dd9817-84df-4622-bd72-ec597e1936db",
      "name": "Side Hustle1",
      "credentials": {
        "redditOAuth2Api": {
          "id": "uyiNgRBWg8SS2Gqo",
          "name": "Reddit account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "af9bbc38-aa28-4447-a0f5-c75e257ee17e",
              "name": "selftext",
              "value": "={{ $json.selftext }}",
              "type": "string"
            },
            {
              "id": "16b2a536-acca-4f42-9277-66d8f3e935fd",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "3e5210eb-b2fe-4bd0-aadc-e1c0213cefb5",
              "name": "score",
              "value": "={{ $json.score || 0 }}",
              "type": "string"
            },
            {
              "id": "c50e3650-0d56-43f8-8118-025ece42704d",
              "name": "num_comments",
              "value": "={{ $json.num_comments || 0 }}",
              "type": "string"
            },
            {
              "id": "7eedfff1-dee5-4c3f-a165-2d2fd782dfa3",
              "name": "created_utc",
              "value": "={{ $json.created_utc }}",
              "type": "string"
            },
            {
              "id": "54424d8b-e8fe-4c8f-81d3-b65d20f12a6c",
              "name": "subreddit",
              "value": "={{ $json.subreddit }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -480,
        448
      ],
      "id": "753ef7ea-90a6-466d-acac-8918d6555049",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are an intelligent business opportunity analyzer. Analyze Reddit posts from r/{{ $('Webhook').item.json.Topic }} to identify the MOST PROMISING business ideas based on actual pain points mentioned.\n\n🔍 PAIN POINT ANALYSIS:\n- Sleep Problems: {{ $json.sleepProblems }} posts\n- Productivity Issues: {{ $json.productivityProblems }} posts  \n- Money/Financial Problems: {{ $json.moneyProblems }} posts\n- Relationship/Social Issues: {{ $json.relationshipProblems }} posts\n- Health/Fitness Problems: {{ $json.healthProblems }} posts\n- Work/Career Issues: {{ $json.workProblems }} posts\n- Technology Gaps: {{ $json.techProblems }} posts\n- Total Pain Points Detected: {{ $json.painPointCount }} posts\n\n📊 MARKET DATA:\n- Total Posts Analyzed: {{ $json.postCount }}\n- Total Engagement: {{ $json.totalUpvotes }} upvotes, {{ $json.totalComments }} comments\n- Market Demand Score: {{ $json.marketDemandScore }}%\n- Competition Level: {{ $json.competitionLevel }}\n\n🎯 YOUR TASK:\n1. Focus ONLY on the TOP 3 pain point categories with the highest numbers\n2. For each top category, analyze the actual post content to understand specific problems\n3. Generate 1-2 targeted business ideas per category that directly solve those problems\n4. Prioritize ideas based on market demand and feasibility\n\n📝 ANALYSIS METHODOLOGY:\n- Read through the posts: {{ JSON.stringify($json.posts) }}\n- Identify the exact problems people are describing\n- Look for repeated complaints, frustrations, and \"wish there was\" statements\n- Focus on problems with multiple mentions across different posts\n- Ignore vague or one-off complaints\n\n💡 BUSINESS IDEA CRITERIA:\n- Must solve a real problem mentioned by multiple users\n- Should be technically feasible to build\n- Must have clear monetization potential\n- Target problems with highest engagement (upvotes/comments)\n\nReturn ONLY a JSON array of 3-6 business ideas:\n[\n  {\n    \"title\": \"Specific Business Idea Name\",\n    \"description\": \"2-3 sentences explaining what it does and how it works\",\n    \"category\": \"SaaS/App/Service/E-commerce/Platform\",\n    \"painPointCategory\": \"sleep/productivity/money/relationship/health/work/tech\",\n    \"specificProblem\": \"Exact problem this solves from the posts\",\n    \"targetAudience\": \"Who would use this\",\n    \"mvpDescription\": \"Simple first version to test the market\",\n    \"monetization\": \"How it makes money\",\n    \"marketValidation\": {\n      \"postsmentioning\": {{ $json.sleepProblems }},\n      \"totalUpvotes\": {{ $json.totalUpvotes }},\n      \"competitionLevel\": \"{{ $json.competitionLevel }}\",\n      \"demandScore\": {{ $json.marketDemandScore }}\n    },\n    \"estimatedDemand\": \"high/medium/low\",\n    \"buildComplexity\": \"simple/medium/complex\"\n  }\n]\n\n🚨 IMPORTANT: Only suggest ideas for problems that appear in MULTIPLE posts. Don't create generic ideas - base everything on actual user complaints you can quote."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        112,
        448
      ],
      "id": "2a3285aa-53e8-40cf-a0c6-d0b78737d4de",
      "name": "Startup Idea Extractor1",
      "credentials": {
        "openAiApi": {
          "id": "ZMZuSK1Z9O4REjaX",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Create a comprehensive business opportunity report based on: {{ $json.message.content }}\n\nStructure the report with:\n\n# 🚀 Reddit-Validated Business Opportunities\n\n## 📊 Executive Summary\n- Total posts analyzed\n- Key pain point categories discovered\n- Market demand indicators\n\n## 💡 Top Business Ideas\nFor each idea include:\n- **Problem Validation**: Quote specific Reddit posts that validate this problem\n- **Business Model**: How it makes money\n- **MVP Strategy**: First version to build and test\n- **Target Market**: Specific user demographics\n- **Implementation Steps**: 3-5 concrete next steps\n- **Success Metrics**: How to measure if it's working\n\n## 🎯 Recommended Action Plan\n- Which idea to pursue first and why\n- Estimated timeline for MVP\n- Budget requirements\n- Key risks and mitigation strategies\n\nUse clear headings, bullet points, and actionable language. Make it ready for an entrepreneur to take immediate action."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        496,
        448
      ],
      "id": "c9257e5e-703b-4fc3-aa25-807a44cfe66a",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "ZMZuSK1Z9O4REjaX",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "5b12bee1-e387-4167-8a79-996d05a8d406",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -992,
        448
      ],
      "id": "69cb9eb3-93a9-4743-a902-c9faac2afbdb",
      "name": "Webhook",
      "webhookId": "5b12bee1-e387-4167-8a79-996d05a8d406"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "=posts",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -272,
        448
      ],
      "id": "7a1421bc-87ac-4610-af9d-2d3d0b7ce3db",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "15889da8-19e9-4326-87c2-ddfb387ae034",
              "name": "totalUpvotes",
              "value": "={{ $json.posts.reduce((sum, post) => sum + (post.score || 0), 0) }}",
              "type": "string"
            },
            {
              "id": "ff02e962-abf0-4679-9863-bb6281e3c417",
              "name": "totalComments",
              "value": "={{ $json.posts.reduce((sum, post) => sum + (post.num_comments || 0), 0) }}",
              "type": "string"
            },
            {
              "id": "30a89faf-8a1f-4ab9-ac32-6519190fc80b",
              "name": "postCount",
              "value": "={{ $json.posts.length }}",
              "type": "string"
            },
            {
              "id": "4096e150-7af7-40eb-b7ed-2ef57790b635",
              "name": "painPointCount",
              "value": "={{ $json.posts.filter(post => { const text = ((post.selftext || '') + ' ' + (post.title || '')).toLowerCase(); return text.includes('problem') || text.includes('issue') || text.includes('struggle') || text.includes('difficult') || text.includes('frustrat') || text.includes('need help') || text.includes('can\\'t find') || text.includes('looking for') || text.includes('wish there was') || text.includes('why isn\\'t there') || text.includes('hate that') || text.includes('annoying') || text.includes('pain') || text.includes('stress'); }).length }}",
              "type": "string"
            },
            {
              "id": "pain-analysis-1",
              "name": "sleepProblems",
              "value": "={{ $json.posts.filter(post => { const text = ((post.selftext || '') + ' ' + (post.title || '')).toLowerCase(); return (text.includes('sleep') || text.includes('insomnia') || text.includes('tired') || text.includes('wake up')) && (text.includes('problem') || text.includes('issue') || text.includes('struggle') || text.includes('can\\'t') || text.includes('difficult')); }).length }}",
              "type": "string"
            },
            {
              "id": "pain-analysis-2",
              "name": "productivityProblems",
              "value": "={{ $json.posts.filter(post => { const text = ((post.selftext || '') + ' ' + (post.title || '')).toLowerCase(); return (text.includes('productiv') || text.includes('focus') || text.includes('distract') || text.includes('time management') || text.includes('procrastin')) && (text.includes('problem') || text.includes('issue') || text.includes('struggle') || text.includes('can\\'t') || text.includes('difficult')); }).length }}",
              "type": "string"
            },
            {
              "id": "pain-analysis-3",
              "name": "moneyProblems",
              "value": "={{ $json.posts.filter(post => { const text = ((post.selftext || '') + ' ' + (post.title || '')).toLowerCase(); return (text.includes('money') || text.includes('budget') || text.includes('expensive') || text.includes('afford') || text.includes('broke') || text.includes('financial')) && (text.includes('problem') || text.includes('issue') || text.includes('struggle') || text.includes('can\\'t') || text.includes('difficult')); }).length }}",
              "type": "string"
            },
            {
              "id": "pain-analysis-4",
              "name": "relationshipProblems",
              "value": "={{ $json.posts.filter(post => { const text = ((post.selftext || '') + ' ' + (post.title || '')).toLowerCase(); return (text.includes('dating') || text.includes('relationship') || text.includes('lonely') || text.includes('friends') || text.includes('social')) && (text.includes('problem') || text.includes('issue') || text.includes('struggle') || text.includes('can\\'t') || text.includes('difficult')); }).length }}",
              "type": "string"
            },
            {
              "id": "pain-analysis-5",
              "name": "healthProblems",
              "value": "={{ $json.posts.filter(post => { const text = ((post.selftext || '') + ' ' + (post.title || '')).toLowerCase(); return (text.includes('health') || text.includes('fitness') || text.includes('weight') || text.includes('exercise') || text.includes('diet')) && (text.includes('problem') || text.includes('issue') || text.includes('struggle') || text.includes('can\\'t') || text.includes('difficult')); }).length }}",
              "type": "string"
            },
            {
              "id": "pain-analysis-6",
              "name": "workProblems",
              "value": "={{ $json.posts.filter(post => { const text = ((post.selftext || '') + ' ' + (post.title || '')).toLowerCase(); return (text.includes('work') || text.includes('job') || text.includes('career') || text.includes('boss') || text.includes('coworker')) && (text.includes('problem') || text.includes('issue') || text.includes('struggle') || text.includes('can\\'t') || text.includes('difficult') || text.includes('hate') || text.includes('stress')); }).length }}",
              "type": "string"
            },
            {
              "id": "pain-analysis-7",
              "name": "techProblems",
              "value": "={{ $json.posts.filter(post => { const text = ((post.selftext || '') + ' ' + (post.title || '')).toLowerCase(); return (text.includes('app') || text.includes('software') || text.includes('tech') || text.includes('computer') || text.includes('phone')) && (text.includes('problem') || text.includes('issue') || text.includes('struggle') || text.includes('can\\'t') || text.includes('difficult') || text.includes('wish there was') || text.includes('need something')); }).length }}",
              "type": "string"
            },
            {
              "id": "8cca50a4-3ee9-4d7b-ac28-bb6ad13077c0",
              "name": "competitionLevel",
              "value": "={{ $json.posts.length > 30 ? 'high' : $json.posts.length > 15 ? 'medium' : 'low' }}",
              "type": "string"
            },
            {
              "id": "3820c1a5-36f9-457e-bfbb-b969582c0365",
              "name": "marketDemandScore",
              "value": "={{ Math.min(100, Math.round(($json.posts.length * 2) + ($json.posts.reduce((sum, post) => sum + (post.score || 0), 0) / Math.max($json.posts.length, 1)))) }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -80,
        448
      ],
      "id": "669f1b75-f353-423f-b72e-d1386ff51fbb",
      "name": "Calculate Engagement Stats1"
    }
  ],
  "pinData": {},
  "connections": {
    "Side Hustle1": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Startup Idea Extractor1": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Side Hustle1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Calculate Engagement Stats1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Engagement Stats1": {
      "main": [
        [
          {
            "node": "Startup Idea Extractor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4dbd0d7f-4a77-49f3-872c-2147cffec43f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ce8be69208799f089d8ee38636c222e9aada25e18789fcf5e89c28a3b98ade1d"
  },
  "id": "9Wv6paI5gSeAqWvx",
  "tags": []
}